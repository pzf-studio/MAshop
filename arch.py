import os
from pathlib import Path
from datetime import datetime

def generate_project_architecture(start_path='.', max_depth=None, ignore_dirs=None, 
                                output_file='arch.txt', include_stats=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞
    """
    if ignore_dirs is None:
        ignore_dirs = {'.git', '__pycache__', '.pytest_cache', 'venv', 'env', 'node_modules', '.idea', '.vscode'}
    
    start_path = Path(start_path)
    output_lines = []
    file_count = 0
    dir_count = 0
    
    def _build_tree(path, prefix="", depth=0, is_last=False):
        nonlocal file_count, dir_count
        
        if max_depth and depth > max_depth:
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if path.name in ignore_dirs or path.name.startswith('.'):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–∏–ø
        if path.is_dir():
            icon = "üìÅ"
            dir_count += 1
        else:
            icon = "üìÑ"
            file_count += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        line = f"{prefix}{connector}{icon} {path.name}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        if path.is_file():
            size = path.stat().st_size
            size_str = _format_size(size)
            line += f" ({size_str})"
        
        output_lines.append(line)
        
        if path.is_dir():
            items = sorted(list(path.iterdir()))
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            items = [item for item in items if item.name not in ignore_dirs and not item.name.startswith('.')]
            
            for i, item in enumerate(items):
                is_last_item = i == len(items) - 1
                new_prefix = prefix + ("    " if is_last else "‚îÇ   ")
                _build_tree(item, new_prefix, depth + 1, is_last_item)
    
    def _format_size(size):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} TB"
    
    # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    _build_tree(start_path, is_last=True)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = [
        "=" * 80,
        "üèóÔ∏è  –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê",
        "=" * 80,
        f"üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {start_path.absolute()}",
        ""
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if include_stats:
        stats = [
            "",
            "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
            f"   üìÅ –ü–∞–ø–æ–∫: {dir_count}",
            f"   üìÑ –§–∞–π–ª–æ–≤: {file_count}",
            f"   üì¶ –í—Å–µ–≥–æ: {dir_count + file_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
            ""
        ]
        header.extend(stats)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    content = "\n".join(header + output_lines)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_file}")
        if include_stats:
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {dir_count} –ø–∞–ø–æ–∫, {file_count} —Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
    
    return content

def print_project_tree(start_path='.', max_depth=None, ignore_dirs=None):
    """
    –í—ã–≤–æ–¥–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    """
    content = generate_project_architecture(start_path, max_depth, ignore_dirs, 
                                          output_file=None, include_stats=False)
    print(content)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
def update_architecture(max_depth=4):
    """
    –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    generate_project_architecture('.', max_depth=max_depth, include_stats=True)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª arch.txt
    update_architecture(max_depth=4)
    
    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    # print_project_tree('.', max_depth=3)