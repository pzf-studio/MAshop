// admin.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ MA Furniture
class AdminPanel {
    constructor() {
        // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!adminAuth.validateSession()) {
            window.location.href = 'admin-login.html';
            return;
        }

        this.products = [];
        this.sections = [];
        this.currentProductId = null;
        this.init();
    }

    async init() {
        this.setupEventListeners();
        await this.loadData();
        this.renderProducts();
        this.renderSections();
        this.hideLoading();
        console.log('Admin panel initialized');
    }

    hideLoading() {
        const loadingElement = document.getElementById('pageLoading');
        if (loadingElement) {
            loadingElement.classList.add('hidden');
        }
    }

    // üîê –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation' : 'info'}-circle"></i>
                ${message}
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    setupEventListeners() {
        // –¢–∞–±—ã
        document.querySelectorAll('.admin-tab').forEach(tab => {
            tab.addEventListener('click', () => this.switchTab(tab.dataset.tab));
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        document.getElementById('addProductBtn')?.addEventListener('click', () => {
            this.openProductModal();
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞
        document.getElementById('addSectionBtn')?.addEventListener('click', () => {
            this.openSectionModal();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('refreshBtn')?.addEventListener('click', () => {
            this.loadData();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.getElementById('modalClose')?.addEventListener('click', () => {
            this.closeModal('productModal');
        });

        document.getElementById('cancelBtn')?.addEventListener('click', () => {
            this.closeModal('productModal');
        });

        document.getElementById('sectionModalClose')?.addEventListener('click', () => {
            this.closeModal('sectionModal');
        });

        document.getElementById('cancelSectionBtn')?.addEventListener('click', () => {
            this.closeModal('sectionModal');
        });

        // –§–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞
        document.getElementById('productForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveProduct();
        });

        // –§–æ—Ä–º–∞ —Ä–∞–∑–¥–µ–ª–∞
        document.getElementById('sectionForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveSection();
        });

        // –í—ã–±–æ—Ä –±–µ–π–¥–∂–∞
        document.querySelectorAll('.badge-option').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.badge-option').forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                document.getElementById('productBadge').value = option.dataset.badge;
            });
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        document.getElementById('uploadImagesBtn')?.addEventListener('click', () => {
            document.getElementById('productImages').click();
        });

        document.getElementById('productImages')?.addEventListener('change', (e) => {
            this.handleImageUpload(e.target.files);
        });

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        document.getElementById('confirmDelete')?.addEventListener('click', () => {
            this.confirmDeleteProduct();
        });

        document.getElementById('cancelDelete')?.addEventListener('click', () => {
            this.closeModal('confirmModal');
        });

        document.getElementById('confirmSectionDelete')?.addEventListener('click', () => {
            this.confirmDeleteSection();
        });

        document.getElementById('cancelSectionDelete')?.addEventListener('click', () => {
            this.closeModal('sectionConfirmModal');
        });
    }

    switchTab(tabName) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Ç–∞–±—ã
        document.querySelectorAll('.admin-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
        document.getElementById(tabName + 'Tab')?.classList.add('active');
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ç–∞–±–∞
        document.querySelectorAll('.admin-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        document.querySelector(`[data-tab="${tabName}"]`)?.classList.add('active');
    }

    async loadData() {
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
            this.products = JSON.parse(localStorage.getItem('adminProducts')) || [];
            this.sections = JSON.parse(localStorage.getItem('adminSections')) || [];

            // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
            if (this.sections.length === 0) {
                this.sections = [
                    { id: 1, name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', code: 'classic', product_count: 0, active: true },
                    { id: 2, name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ', code: 'modern', product_count: 0, active: true },
                    { id: 3, name: '–ü—Ä–µ–º–∏—É–º', code: 'premium', product_count: 0, active: true }
                ];
                this.saveSections();
            }

            this.renderProducts();
            this.renderSections();
            
            this.showNotification('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
            
        } catch (error) {
            console.error('Load data error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    renderProducts() {
        const tbody = document.getElementById('productsTableBody');
        if (!tbody) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö
        this.updateSectionCounts();

        tbody.innerHTML = this.products.map(product => `
            <tr>
                <td>${product.id}</td>
                <td>
                    <div class="product-with-image">
                        ${product.images && product.images.length > 0 ? 
                            `<img src="${product.images[0]}" alt="${product.name}" class="product-image-small">` : 
                            '<div class="product-image-small" style="background: #f0f0f0; display: flex; align-items: center; justify-content: center; color: #666;"><i class="fas fa-cube"></i></div>'
                        }
                        <div>${product.name}</div>
                    </div>
                </td>
                <td>${this.getCategoryName(product.category)}</td>
                <td>${this.getSectionName(product.section)}</td>
                <td>${product.price.toLocaleString()} ‚ÇΩ</td>
                <td>${product.badge || '-'}</td>
                <td>
                    <span class="status-badge ${product.active ? 'active' : 'inactive'}">
                        ${product.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <div class="product-actions">
                        <button class="btn-edit" onclick="adminPanel.editProduct(${product.id})">
                            <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="btn-delete" onclick="adminPanel.deleteProduct(${product.id})">
                            <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                        <button class="btn-view" onclick="adminPanel.viewProduct(${product.id})">
                            <i class="fas fa-eye"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const counter = document.getElementById('productCounter');
        if (counter) {
            const activeCount = this.products.filter(p => p.active).length;
            counter.textContent = `–¢–æ–≤–∞—Ä–æ–≤: ${activeCount}/${this.products.length}`;
        }
    }

    renderSections() {
        const tbody = document.getElementById('sectionsTableBody');
        if (!tbody) return;

        tbody.innerHTML = this.sections.map(section => `
            <tr>
                <td>${section.id}</td>
                <td>${section.name}</td>
                <td>${section.code}</td>
                <td>${section.product_count}</td>
                <td>
                    <span class="status-badge ${section.active ? 'active' : 'inactive'}">
                        ${section.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <div class="product-actions">
                        <button class="btn-edit" onclick="adminPanel.editSection(${section.id})">
                            <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="btn-delete" onclick="adminPanel.deleteSection(${section.id})">
                            <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
        const counter = document.getElementById('sectionsCounter');
        if (counter) {
            counter.textContent = `–†–∞–∑–¥–µ–ª–æ–≤: ${this.sections.length}`;
        }
    }

    updateSectionCounts() {
        this.sections.forEach(section => {
            section.product_count = this.products.filter(product => 
                product.section === section.code && product.active
            ).length;
        });
        this.saveSections();
    }

    getCategoryName(category) {
        const categories = {
            'pantograph': '–ü–∞–Ω—Ç–æ–≥—Ä–∞—Ñ—ã',
            'wardrobe': '–ì–∞—Ä–¥–µ—Ä–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
            'premium': '–ü—Ä–µ–º–∏—É–º –∫–æ–ª–ª–µ–∫—Ü–∏—è',
            'kitchen': '–ö—É—Ö–æ–Ω–Ω—ã–µ –ª–∏—Ñ—Ç—ã'
        };
        return categories[category] || category;
    }

    getSectionName(sectionCode) {
        const section = this.sections.find(s => s.code === sectionCode);
        return section ? section.name : sectionCode;
    }

    openProductModal(product = null) {
        this.currentProductId = product ? product.id : null;
        const modal = document.getElementById('productModal');
        const title = document.getElementById('modalTitle');
        
        if (product) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
            this.fillProductForm(product);
        } else {
            title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
            this.resetProductForm();
        }
        
        this.renderSectionOptions();
        modal.classList.add('active');
    }

    openSectionModal(section = null) {
        this.currentSectionId = section ? section.id : null;
        const modal = document.getElementById('sectionModal');
        const title = document.getElementById('sectionModalTitle');
        
        if (section) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª';
            this.fillSectionForm(section);
        } else {
            title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª';
            this.resetSectionForm();
        }
        
        modal.classList.add('active');
    }

    closeModal(modalId) {
        document.getElementById(modalId).classList.remove('active');
        this.currentProductId = null;
        this.currentSectionId = null;
    }

    resetProductForm() {
        document.getElementById('productForm').reset();
        document.getElementById('productId').value = '';
        document.getElementById('productBadge').value = '';
        document.querySelectorAll('.badge-option').forEach(opt => opt.classList.remove('selected'));
        document.querySelector('.badge-option[data-badge=""]').classList.add('selected');
        document.getElementById('imagePreview').innerHTML = '';
    }

    resetSectionForm() {
        document.getElementById('sectionForm').reset();
        document.getElementById('sectionId').value = '';
    }

    fillProductForm(product) {
        document.getElementById('productId').value = product.id;
        document.getElementById('productName').value = product.name;
        document.getElementById('productPrice').value = product.price;
        document.getElementById('productCategory').value = product.category;
        document.getElementById('productSection').value = product.section;
        document.getElementById('productSku').value = product.sku || '';
        document.getElementById('productStock').value = product.stock || 0;
        document.getElementById('productDescription').value = product.description || '';
        document.getElementById('productFeatures').value = Array.isArray(product.features) ? 
            product.features.join('\n') : (product.features || '');
        document.getElementById('productSpecifications').value = typeof product.specifications === 'object' ? 
            Object.entries(product.specifications).map(([k, v]) => `${k}: ${v}`).join('\n') : 
            (product.specifications || '');
        document.getElementById('productActive').checked = product.active !== false;
        document.getElementById('productFeatured').checked = product.featured || false;
        
        // –ë–µ–π–¥–∂
        document.getElementById('productBadge').value = product.badge || '';
        document.querySelectorAll('.badge-option').forEach(opt => opt.classList.remove('selected'));
        document.querySelector(`.badge-option[data-badge="${product.badge || ''}"]`).classList.add('selected');
        
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.renderImagePreview(product.images || []);
    }

    fillSectionForm(section) {
        document.getElementById('sectionId').value = section.id;
        document.getElementById('sectionName').value = section.name;
        document.getElementById('sectionCode').value = section.code;
        document.getElementById('sectionActive').checked = section.active !== false;
    }

    renderSectionOptions() {
        const select = document.getElementById('productSection');
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª</option>' +
            this.sections.filter(s => s.active).map(section => 
                `<option value="${section.code}">${section.name}</option>`
            ).join('');
    }

    renderImagePreview(images) {
        const container = document.getElementById('imagePreview');
        container.innerHTML = images.map((image, index) => `
            <div class="preview-item">
                <img src="${image}" alt="Preview ${index + 1}">
                <button type="button" class="remove-image" onclick="adminPanel.removeImage(${index})">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `).join('');
    }

    handleImageUpload(files) {
        const images = [];
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    images.push(e.target.result);
                    if (images.length === files.length) {
                        this.addImagesToPreview(images);
                    }
                };
                reader.readAsDataURL(file);
            }
        }
    }

    addImagesToPreview(newImages) {
        const container = document.getElementById('imagePreview');
        const currentImages = this.getCurrentImages();
        const allImages = [...currentImages, ...newImages];
        
        this.renderImagePreview(allImages);
    }

    removeImage(index) {
        const currentImages = this.getCurrentImages();
        currentImages.splice(index, 1);
        this.renderImagePreview(currentImages);
    }

    getCurrentImages() {
        const container = document.getElementById('imagePreview');
        return Array.from(container.querySelectorAll('img')).map(img => img.src);
    }

    saveProduct() {
        try {
            const formData = new FormData(document.getElementById('productForm'));
            const images = this.getCurrentImages();
            
            const productData = {
                id: this.currentProductId || this.generateProductId(),
                name: document.getElementById('productName').value,
                price: parseInt(document.getElementById('productPrice').value),
                category: document.getElementById('productCategory').value,
                section: document.getElementById('productSection').value,
                sku: document.getElementById('productSku').value,
                stock: parseInt(document.getElementById('productStock').value) || 0,
                description: document.getElementById('productDescription').value,
                features: this.parseFeatures(document.getElementById('productFeatures').value),
                specifications: this.parseSpecifications(document.getElementById('productSpecifications').value),
                badge: document.getElementById('productBadge').value,
                active: document.getElementById('productActive').checked,
                featured: document.getElementById('productFeatured').checked,
                images: images,
                updatedAt: new Date().toISOString()
            };

            if (!productData.name || !productData.price || !productData.category || !productData.section) {
                this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
                return;
            }

            if (this.currentProductId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                const index = this.products.findIndex(p => p.id === this.currentProductId);
                if (index !== -1) {
                    productData.createdAt = this.products[index].createdAt;
                    this.products[index] = productData;
                    this.showNotification('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
                }
            } else {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                productData.createdAt = new Date().toISOString();
                this.products.push(productData);
                this.showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            }

            this.saveProducts();
            this.renderProducts();
            this.closeModal('productModal');
            this.notifyProductsUpdate();

        } catch (error) {
            console.error('Save product error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'error');
        }
    }

    saveSection() {
        try {
            const sectionData = {
                id: this.currentSectionId || this.generateSectionId(),
                name: document.getElementById('sectionName').value,
                code: document.getElementById('sectionCode').value,
                active: document.getElementById('sectionActive').checked,
                product_count: 0
            };

            if (!sectionData.name || !sectionData.code) {
                this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
            const existingSection = this.sections.find(s => 
                s.code === sectionData.code && s.id !== this.currentSectionId
            );
            if (existingSection) {
                this.showNotification('–†–∞–∑–¥–µ–ª —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
                return;
            }

            if (this.currentSectionId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                const index = this.sections.findIndex(s => s.id === this.currentSectionId);
                if (index !== -1) {
                    this.sections[index] = { ...this.sections[index], ...sectionData };
                    this.showNotification('–†–∞–∑–¥–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
                }
            } else {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                this.sections.push(sectionData);
                this.showNotification('–†–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            }

            this.saveSections();
            this.renderSections();
            this.closeModal('sectionModal');

        } catch (error) {
            console.error('Save section error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞', 'error');
        }
    }

    parseFeatures(featuresText) {
        return featuresText
            .split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 0);
    }

    parseSpecifications(specsText) {
        const specifications = {};
        const lines = specsText.split('\n');
        
        lines.forEach(line => {
            const [key, ...valueParts] = line.split(':');
            if (key && valueParts.length > 0) {
                specifications[key.trim()] = valueParts.join(':').trim();
            }
        });
        
        return specifications;
    }

    generateProductId() {
        const maxId = this.products.reduce((max, product) => Math.max(max, product.id), 0);
        return maxId + 1;
    }

    generateSectionId() {
        const maxId = this.sections.reduce((max, section) => Math.max(max, section.id), 0);
        return maxId + 1;
    }

    editProduct(id) {
        const product = this.products.find(p => p.id === id);
        if (product) {
            this.openProductModal(product);
        }
    }

    editSection(id) {
        const section = this.sections.find(s => s.id === id);
        if (section) {
            this.openSectionModal(section);
        }
    }

    deleteProduct(id) {
        this.productToDelete = id;
        const product = this.products.find(p => p.id === id);
        document.getElementById('confirmModal').classList.add('active');
    }

    deleteSection(id) {
        this.sectionToDelete = id;
        const section = this.sections.find(s => s.id === id);
        const message = document.getElementById('sectionConfirmMessage');
        message.textContent = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª "${section.name}"?`;
        document.getElementById('sectionConfirmModal').classList.add('active');
    }

    confirmDeleteProduct() {
        if (this.productToDelete) {
            this.products = this.products.filter(p => p.id !== this.productToDelete);
            this.saveProducts();
            this.renderProducts();
            this.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
            this.notifyProductsUpdate();
            this.productToDelete = null;
        }
        this.closeModal('confirmModal');
    }

    confirmDeleteSection() {
        if (this.sectionToDelete) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ
            const productsInSection = this.products.filter(p => {
                const section = this.sections.find(s => s.id === this.sectionToDelete);
                return section && p.section === section.code;
            });

            if (productsInSection.length > 0) {
                this.showNotification('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã', 'error');
                this.closeModal('sectionConfirmModal');
                return;
            }

            this.sections = this.sections.filter(s => s.id !== this.sectionToDelete);
            this.saveSections();
            this.renderSections();
            this.showNotification('–†–∞–∑–¥–µ–ª —É–¥–∞–ª–µ–Ω', 'success');
            this.sectionToDelete = null;
        }
        this.closeModal('sectionConfirmModal');
    }

    viewProduct(id) {
        window.open(`piece.html?id=${id}`, '_blank');
    }

    saveProducts() {
        localStorage.setItem('adminProducts', JSON.stringify(this.products));
    }

    saveSections() {
        localStorage.setItem('adminSections', JSON.stringify(this.sections));
    }

    // üîê –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º)
    notifyProductsUpdate() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const event = new CustomEvent('adminProductsUpdated');
        window.dispatchEvent(event);
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º localStorage –¥–ª—è cross-tab —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        localStorage.setItem('adminProducts', JSON.stringify(this.products));
        
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        this.showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –º–∞–≥–∞–∑–∏–Ω–æ–º', 'success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let adminPanel;
document.addEventListener('DOMContentLoaded', () => {
    adminPanel = new AdminPanel();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.adminPanel = adminPanel;