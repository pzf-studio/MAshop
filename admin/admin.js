// admin.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminPanel {
    constructor() {
        // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!adminAuth.validateSession()) {
            window.location.href = 'admin-login.html';
            return;
        }

        this.products = [];
        this.sections = [];
        this.init();
    }

    async init() {
        this.setupEventListeners();
        await this.loadData();
        this.renderProducts();
        this.renderSections();
        this.hideLoading();
    }

    hideLoading() {
        const loadingElement = document.getElementById('pageLoading');
        if (loadingElement) {
            loadingElement.classList.add('hidden');
        }
    }

    // üîê –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    setupEventListeners() {
        // –¢–∞–±—ã
        document.querySelectorAll('.admin-tab').forEach(tab => {
            tab.addEventListener('click', () => this.switchTab(tab.dataset.tab));
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        document.getElementById('addProductBtn')?.addEventListener('click', () => {
            this.openProductModal();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('refreshBtn')?.addEventListener('click', () => {
            this.loadData();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.getElementById('modalClose')?.addEventListener('click', () => {
            this.closeModal('productModal');
        });

        document.getElementById('cancelBtn')?.addEventListener('click', () => {
            this.closeModal('productModal');
        });
    }

    switchTab(tabName) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Ç–∞–±—ã
        document.querySelectorAll('.admin-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
        document.getElementById(tabName + 'Tab')?.classList.add('active');
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ç–∞–±–∞
        document.querySelectorAll('.admin-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        document.querySelector(`[data-tab="${tabName}"]`)?.classList.add('active');
    }

    async loadData() {
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.products = [
                {
                    id: 1,
                    name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1',
                    category: 'pantograph',
                    section: 'classic',
                    price: 15000,
                    badge: '–ù–æ–≤–∏–Ω–∫–∞',
                    active: true
                },
                {
                    id: 2,
                    name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2',
                    category: 'wardrobe',
                    section: 'modern',
                    price: 25000,
                    badge: '–•–∏—Ç –ø—Ä–æ–¥–∞–∂',
                    active: true
                }
            ];

            this.sections = [
                { id: 1, name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', code: 'classic', product_count: 5, active: true },
                { id: 2, name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ', code: 'modern', product_count: 3, active: true }
            ];

            this.renderProducts();
            this.renderSections();
            
            this.showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            
        } catch (error) {
            console.error('Load data error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    renderProducts() {
        const tbody = document.getElementById('productsTableBody');
        if (!tbody) return;

        tbody.innerHTML = this.products.map(product => `
            <tr>
                <td>${product.id}</td>
                <td>
                    <div class="product-with-image">
                        <div>${product.name}</div>
                    </div>
                </td>
                <td>${this.getCategoryName(product.category)}</td>
                <td>${this.getSectionName(product.section)}</td>
                <td>${product.price.toLocaleString()} ‚ÇΩ</td>
                <td>${product.badge || '-'}</td>
                <td>
                    <span class="status-badge ${product.active ? 'active' : 'inactive'}">
                        ${product.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <div class="product-actions">
                        <button class="btn-edit" onclick="adminPanel.editProduct(${product.id})">
                            <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="btn-delete" onclick="adminPanel.deleteProduct(${product.id})">
                            <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const counter = document.getElementById('productCounter');
        if (counter) {
            counter.textContent = `–¢–æ–≤–∞—Ä–æ–≤: ${this.products.length}/35`;
        }
    }

    renderSections() {
        const tbody = document.getElementById('sectionsTableBody');
        if (!tbody) return;

        tbody.innerHTML = this.sections.map(section => `
            <tr>
                <td>${section.id}</td>
                <td>${section.name}</td>
                <td>${section.code}</td>
                <td>${section.product_count}</td>
                <td>
                    <span class="status-badge ${section.active ? 'active' : 'inactive'}">
                        ${section.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <div class="product-actions">
                        <button class="btn-edit">
                            <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="btn-delete">
                            <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
        const counter = document.getElementById('sectionsCounter');
        if (counter) {
            counter.textContent = `–†–∞–∑–¥–µ–ª–æ–≤: ${this.sections.length}`;
        }
    }

    getCategoryName(category) {
        const categories = {
            'pantograph': '–ü–∞–Ω—Ç–æ–≥—Ä–∞—Ñ—ã',
            'wardrobe': '–ì–∞—Ä–¥–µ—Ä–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã',
            'premium': '–ü—Ä–µ–º–∏—É–º –∫–æ–ª–ª–µ–∫—Ü–∏—è'
        };
        return categories[category] || category;
    }

    getSectionName(sectionCode) {
        const section = this.sections.find(s => s.code === sectionCode);
        return section ? section.name : sectionCode;
    }

    openProductModal() {
        document.getElementById('productModal').classList.add('active');
    }

    closeModal(modalId) {
        document.getElementById(modalId).classList.remove('active');
    }

    editProduct(id) {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    deleteProduct(id) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
            this.products = this.products.filter(p => p.id !== id);
            this.renderProducts();
            this.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let adminPanel;
document.addEventListener('DOMContentLoaded', () => {
    adminPanel = new AdminPanel();
});